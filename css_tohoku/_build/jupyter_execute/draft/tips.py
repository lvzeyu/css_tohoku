#!/usr/bin/env python
# coding: utf-8

# # Tips

# ## VSCode

# ### 作業リポジトリを指定する
# 
# gitリポジトリ内で複数のgitリポジトリの履歴を管理することができますが、場合による混乱になることもありますので、作業リポジトリを指定して、VSCodeを使う方がいいです。

# - メニュー　→　ファイル　→ 新しいウィンドウ
# - 新しいウィンドウで、左側のツールバー　→　エクスプローラー　→ フォルダーを開く
# - 子ディレクトリを選択

# ## Git/GitHub
# 

# ### 指定するリポジトリから```git pull```をする方法
# 

# ```git pull <original_repository>```という形で、指定するリポジトリから```git pull```をすることができます。
# 
# ```https://github.com/lvzeyu/chss_2023_assignment```から最新の状況を同期する操作を例として説明します。

# ````{tab-set}
# 
# ```{tab-item} ターミナル操作
# 
# - ```cd ~/chss_2023_assignment```
# - ```git remote -v```でgitリポジトリに関連付けられたリモートリポジトリの一覧とそのURLを表示する
# - ```origin/upstream  git@github.com:lvzeyu/chss_2023_assignment.git```というリモートリポジトリが表示されることを確認
# - ```git branch <branch_name>```で自分のブランチを作成・移動
# - ```git pull origin main```または ```git pull upstream main```でローカルリポジトリブランチをリポジトリの最新状態に更新します。
# ```
# 
# ```{tab-item} VSCode操作
# -「ソース管理」→「...」をクリックします。
# - 「プル、プッシュ」→ 「指定元からプル」
# - リモートリポジトリのブランチを指定してください。基本的には```origin main```または```upstream main```であるはずです。
# 
# ```

# ## print文
# 

# ### print文の基本
# 

# ```print()```関数の引数には数値、配列、タプル、オブジェクトなどを指定することができます。
# 

# In[1]:


print(3)                   #=> 3
print([1, 2, 3])           #=> [1, 2, 3]
print((1, 2, 3))           #=> (1, 2, 3)
print({'k1':10, 'k2':20})  #=> {'k2': 20, 'k1': 10}


# 引数をカンマ(```,```)で複数指定すると、ひとつのスペースで区切って複数の値を表示します。

# In[2]:


print("AAA", "BBB", 30)         #=> AAA BBB


# ### フォーマットされた出力

# より高度的な使い方として、出力結果をよりわかりやすく整形することができます。
# 
# #### ```.format()```
# 
# ```.format()```メソッドを使う基本的な構文は、中括弧```{}```を使って文字列内にプレースホルダーを設定し、それに```.format()```で値を渡す形です。

# In[3]:


name = "山田"
age = 25
print("名前：{} 年齢：{}".format(name, age))  #=> 名前：山田 年齢：25


# プレースホルダーに位置を指定することもできます。これにより、引数の順序を自由に変更したり、同じ値を複数回使用したりできます。

# In[4]:


name = "山田"
age = 25
print("名前：{1} 年齢：{0}".format(age, name))  #=> 名前：山田 年齢：25


# キーワード引数を使って値を指定することができます。

# In[5]:


print("名前：{name}、職業：{job}".format(name="木村", job="学生"))


# #### f-strings
# 
# Python 3.6以降では、文字列内で変数を直接埋め込むためのf-stringsが導入されました。
# 
# f-stringを使用するには、文字列の前に```f```または```F```を置き、波括弧```{}```の中に変数名や式を書きます。

# In[6]:


name = "山田"
age = 25
print(f"名前：{name}、年齢：{age}")


# f-stringsでは、値の書式を指定することもできます。これは、値を特定の形式（例えば、小数点以下の桁数を指定する）で表示したい場合に便利です。

# In[7]:


# 小数点以下の桁数を指定
pi = 3.14159265359
print(f"円周率は約 {pi:.2f}")  # 円周率は約 3.14


# In[8]:


# パーセンテージ表示
y = 0.12345
print(f"{y:.4%}") # 12.3450% (パーセンテージ表示)


# 
