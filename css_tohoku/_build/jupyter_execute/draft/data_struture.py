#!/usr/bin/env python
# coding: utf-8

# # データ構造
# 
# 今までは、ブール値、整数、浮動小数点数、文字列という基本データ型を説明ました。ここからは、これらの基本データ型を要素としてまとめて取り扱うデータとしての構造について説明します。

# ## タプル(tuple)

# タプルは、固定長で変更不可能(immutable)な一連のPythonオブジェクトの集合です。タプルでは、構成する要素としてあらゆる型のデータを指定できます。
# 
# ### タプルの作成
# 
# タプルを作成するには、色々な方法があります。

# - コンマで値を区切ります

# In[1]:


tup= 4, 5, 6
tup


# - 構成する要素をコンマで区切り全体を括弧```(...)```で囲みます

# In[2]:


tup= (4, 5, 6)


# - ```tuple```関数で他のシーケンスとイテレータを使ってタプルに変換する

# In[3]:


str_tuple=tuple("string")
str_tuple


# - タプルのタプルも作成できます

# In[4]:


nested_tuple= (4, 5, 6), (7, 8)
nested_tuple


# - ```+```による連結する

# In[5]:


tup+str_tuple


# - ```*```による繰り返し

# In[6]:


tup*3


# ### タプルの操作

# - 文字列と同じように、タプルの要素は```[]```で参照できます。

# In[7]:


tup[0]


# In[8]:


nested_tuple[0]


# In[9]:


nested_tuple[0][0]


# - ```len```タプルを構成する要素を数えます。

# In[10]:


len(tup)


# - タプルを書き換えることはできないです。

# In[11]:


tup[0]=1


# ## リスト
# リストは、可変長で変更可能(mutable)な一連のPythonオブジェクトの集合です。つまり、タプルとは異なり、リスト内容は直接に変更できます。

# ### リストの作成
# - 構成する要素をコンマで区切り全体をかき括弧```[...]```で囲みます

# In[12]:


list_a=[1,2,3]
list_a


# - ```list```関数で他のシーケンスとイテレータを使ってタプルに変換する

# ```{margin}
# リストとタプルは意味的に似ているので、多くの使い方を相互に使うことができます。
# ```

# In[13]:


list_b=list(tup)
list_b


# ### リストの操作
# 
# リストはミュータブルであるため、新しい要素を追加したり、既存の要素を削除、置換したりできます。

# - ```append```による末尾への要素の追加

# In[14]:


list_a.append(4)
list_a


# - ```insert```による特定の位置に要素を挿入

# ```{margin}
# リストとタプルにおける要素の型は一緒でなくでも構いません。
# ```

# In[27]:


list_a.insert(1, "Weber")
list_a


# - ```extend```によるリストの連結

# In[16]:


list_a.extend(list_b)
list_a


# - スライスによるリストの要素を書き換え

# In[17]:


list_a[5]= "Marx"
list_a


# In[18]:


list_a[5:]= ["Marx","Durkheim","Parsons"]
list_a


# - ```remove```による値を指定した要素を削除
# 
# ```{}
# 削除しよう要素が複数ある場合、remove()は最初に見つかった要素だけ削除する
# ```

# In[19]:


list_a.remove(1)
list_a


# - ```del```による特定の位置の要素を削除
# 

# In[20]:


del list_a[1]
list_a


# - ```pop```による指定して要素を取り出し、削除する方法

# In[21]:


list_a.pop(1)


# - ```=```による代入

# In[22]:


list_a[1]="Giddens"
list_a


# - ```in```による要素の有無を確認

# In[23]:


'Weber' in list_a


# In[24]:


'Merton' in list_a


# - ```sort```による要素の並べ替え
# 
# ```sort```メソッドはリスト内の要素を並べ替えます。 引数に何も指定しなければ昇順でとなります。
# 
# 要素が文字列なら、アルファベット順でソードされます。

# In[25]:


list_a.sort()
list_a


# ```reverse=True```引数を追加すれば降順になります・

# In[26]:


list_a.sort(reverse=True)
list_a


# ## 辞書(dict)

# 

# 
