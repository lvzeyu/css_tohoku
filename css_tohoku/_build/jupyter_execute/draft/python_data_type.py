#!/usr/bin/env python
# coding: utf-8

# # データ型
# 
# Pythonでは、変数を使用してデータを格納します。
# 
# 各変数は特定のデータ型を持ち、これによって整数、文字列などの異なる種類のデータを扱うことができます。
# 
# ## 演算子
# 
# 演算子を使用して変数に格納されたデータを操作します。算術演算子による計算、比較演算子による条件判定、論理演算子による複合的な条件式の作成など、プログラムのほとんどすべての動作に演算子が関わっています。
# 
# 同じ演算子が異なるデータ型に適用されるとき異なる操作になることがあります。

# ### 算術演算子
# 
# ```
# +a            # 正数
# -a            # 負数
# a + b         # 加算
# a - b         # 減算
# a * b         # 乗算
# a / b         # 除算
# a % b         # a を b で割った余り
# a ** b        # a の b 乗
# a // b        # 切り捨て除算
# ```

# ### 代入演算子
# 
# ```
# a = b         # a に b を代入する
# a += b        # a = a + b に同じ
# a -= b        # a = a - b に同じ
# a *= b        # a = a * b に同じ
# a /= b        # a = a / b に同じ
# a %= b        # a = a % b に同じ
# a **= b       # a = a ** b に同じ
# a //= b       # a = a // b に同じ
# a &= b        # a = a & b に同じ
# a |= b        # a = a | b に同じ
# a ^= b        # a = a ^ b に同じ
# a <<= b       # a = a << b に同じ
# a >>= b       # a = a >> b に同じ
# ```

# ### 比較演算子
# 
# ```
# a == b           # a が b と等しい
# a != b           # a が b と異なる
# a < b            # a が b よりも小さい
# a > b            # a が b よりも大きい
# a <= b           # a が b 以下である
# a >= b           # a が b 以上である
# a is b           # a が b と等しい
# a is not b       # a が b と異なる
# a in b           # a が b に含まれる (a, b は共に文字列、または、b はリストやタプル)
# a not in b       # a が b に含まれない (a, b は共に文字列、または、b はリストやタプル)
# ```

# ### ブール演算子
# 
# ```
# a and b         # a も b も真であれば真
# a or b          # a または b が真であれば真
# not a           # a が偽であれば真
# ```

# ### 条件演算
# 
# ```
# x if c else y
# ```

# ### 文字列演算
# 
# ```
# a + b         # 文字列 a と 文字列 b を連結します
# a * n         # 文字列 a を n 回繰り返します
# a[n]          # 文字列 a の中の n 番目の文字を取り出します
# a[n:m]        # 文字列 a の中の n 番目から m 番目までの文字列を取り出します
# a[n:]         # 文字列 a の中の n 番目から最後までの文字列を取り出します
# a[:m]         # 文字列 a の中の 0 番目から m 番目までの文字列を取り出します
# a[n:m:s]      # 文字列 a の中の n 番目から m 番目までの文字列を s個とばしで取り出します
# ```

# ## 基本的なデータ型

# ### ブール値
# 
# ブール値（bool型）は、プログラム内で真```True```または偽```False```のいずれかを表すデータ型です。**条件式**や**論理演算**でよく使われます。

# #### 論理演算
# 
# 論理演算子（```and```, ```or```, ```not```）を使って、ブール値を操作します。

# In[1]:


True and False


# In[2]:


True or False


# #### 比較演算
# 

# In[3]:


5 > 3


# In[4]:


7 != 7


# #### 条件文

# In[5]:


if True:
  print("This will always execute")


# ```{note}
# **関数**の詳細については今後の授業で学びますので、さしあたり今は、関数に引数を渡すと、その値に応じた何らかの処理結果を返すということを知っておけば良いです。
# ```

# #### ブール値の変換
# 
# Pythonでは、ほとんどのデータ型をbool型に変換することが可能です。
# 
# 組込み関数```bool()``` は、オブジェクトや演算式等を真理値判定に基づいて、任意のPythonデータ型を```bool```に変換できます。

# - $0$ではない数値は```True```と見されます。

# In[6]:


bool(10)


# - $0$は```False```と見されます。

# In[7]:


bool(0)


# ### 整数(```int```)
# 整数は、小数点以下がなく数値です。

# In[8]:


123


# In[9]:


-123


# 大きな数値のセパレータとしてアンダースコア(```_```)を使えます。

# ```{margin}
# 整数の先頭に$0b$,$0o$,$0x$がつくのは、通常の10進数以外の基数であることを指します。
# ```

# In[10]:


1_000_000


# Pythonでは数値の計算もできます。数学演算子は表のように定義されています。
# 
# 演算の優先順位は通常の数学と同様に定義されています。通常の数学と同様に、()を使えば、演算の順番を決めることもできます。
# <table class="table2">
#     <thead>
#         <tr><th>演算子</th><th>演算</th><th>例</th></tr>
#     </thead>
#     <tbody>  
#         <tr><td>+</td><td>加算</td><td>a + b</td></tr>
#         <tr><td>-</td><td>減算</td><td>a - b</td></tr>
#         <tr><td>*</td><td>乗算</td><td>a * b</td></tr> 
#         <tr><td>/</td><td>除算</td><td>a / b</td></tr> 
#         <tr><td>%</td><td>剰余</td><td>a % b</td></tr>
#         <tr><td>//</td><td>切り捨て除算</td><td>a // b</td></tr>
#         <tr><td>**</td><td>べき乗</td><td>a ** b</td></tr>
#     </tbody>
# </table>
# 
# 少し馴染みのない演算子のは、
# - 演算子 ```//``` は小数部を切り捨てた整数値（商）を返します。
# - 演算子 ```%```は整数除算の余り（剰余）を返します。

# In[11]:


13//5


# In[12]:


13%5


# ### 浮動小数点数 (```float```)
# 
# Pythonでは、整数と小数点のある数（実数）は浮動小数点数といいます。
# 

# In[13]:


5.


# In[14]:


5.0


# 浮動小数点数は文字```e```の後ろに$10$進の桁数を入れて指定することもできます。

# In[15]:


5e2


# ここで注意する必要があるのは、整数と実数が数学的に同じ数を表す場合でも、コンピュータの中で異なる形式で記憶されますので、表示は異なります。 
# ```{margin}
# プログラムの中で扱う変数には様々な"型"(```type```)があります。変数の型は```type()```という関数を使うことで調べることができる。
# ```

# In[16]:


print(type(5.0))
print(type(5))


# 浮動小数点数も算術演算子を使えます。
# 
# また、整数と実数が混ざって計算も可能です。ただ、その場合、結果は実数になります。

# In[17]:


2+5.0


# ```int()```関数で、浮動小数点数を整数に変換できます。

# In[18]:


int(98.5)


# ```float()```関数で、整数を浮動小数点数に変換できます。

# In[19]:


float(98)


# ````{tab-set}
# ```{tab-item} 練習問題1
# 一日は何秒だを計算してみよう。
# ```
# 
# ```{tab-item} 練習問題2
# $1$年$365$日といいますが、厳密的に言えば、$1$年を$366$日とする閏年を$400$年間に$97$回設けることによって、$1$年の平均日数を$365.2425$日とする。
# 
# 今度は一年は何分何秒かを計算しよう。一年$=()$分$()$秒で回答してください。
# ```
# ````

# ### 文字列
# 
# 文字列は数値とは異なるデータ型の一つで、文字通り文字を扱います。
# 
# #### 文字列作成
# 
# 文字列は、**シーケンス**型という広義の型に属しています。シーケンス型とは順番のある要素の集まりを指します。インデックスで要素を指定して取り出すことができます。インデックスは$R$などとは違い、$1$ではなく、$0$から始まります。例えば、
# - ```0:3```とすると、$0$から$2$までの要素を取り出します。
# - ```1:```とすると$1$以降のすべての要素を取り出します。

# 文字列は、 クォートで文字を囲んで作ります。

# In[20]:


text="Hello!"
print(text)


# In[21]:


text='Hello!'
print(text)


# In[22]:


'"ダブル" クォートを埋め込むことができます'


# In[23]:


"'シングル' クォートを埋め込むことができます"


# In[24]:


'''三つのシングルクォート'''


# In[25]:


text='Hello!'


# 特定の文字の前にバックスラッシュをつけると、その文字を特殊な意味として扱うことができます。もっともよく使われるのは改行を意味する```\n```です。
# 
# ```{margin}
# Pythonには、小数の特殊なタイプの文字列があり、それらは最初クォートの前に文字を付けて示す。例えば、先頭が```r```の*raw文字列*では、 文字内の```\n``` は改行を表すエスケープシーケンスをエスケープシーケンスとして解釈されないようにする。特に説明しない限り、ここで取り上げるのは普通のUnicode文字列です。
# ```

# In[26]:


print("Hello\nWorld")


# #### $+$による連結

# In[27]:


"Hello"+"World"


# #### $*$による繰り返し

# In[28]:


"Hello"*3


# #### ```[]```による文字の抽出

# 文字列から文字を取り出したい時には、$[]$にインデックスを指定するとその位置の文字を取得できます。
# - 先頭の文字は$0$から数えます。
# - 一番最後の文字が$-1$でも指定できます。後ろから二番目は$-2$,後ろから三番目は$-3$のように表すことができます。

# In[29]:


name="Max Weber"


# In[30]:


name[0]


# In[31]:


name[-1]


# In[32]:


name[:3]


# In[33]:


name[-5:]


# #### ```len```による文字の抽出

# Pythonの取り組み関数で文字列に対する操作を行うことができます。
# ```{margin}
# 先取りの定義ですが、関数とは、決められた操作を実行する名前付きのコードです。それらの中で、インポートなしですぐに使える関数を「**組み込み関数**」と呼びます。
# ```
# 

# In[34]:


len(name)


# #### ```split```による文字の分割
# ```split```関数は、区切り文字に基づいて文字列を分割し、部分文字列のリストを作ることができます。
# ```{margin}
# 引数とは、関数やを呼び出す際に渡す値のことです。基本的には、関数はこの「渡された値に対して処理を行い、結果を返す」ということを行っています。
# ```

# In[35]:


name.split(" ")


# #### ```replace```による文字の置換
# 
# ```replace```関数は、文字列の一部を置換することができます。

# In[36]:


name.replace("Max","Karl").replace("Weber","Marx")

