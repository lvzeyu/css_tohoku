#!/usr/bin/env python
# coding: utf-8

# # データ型
# 
# ## 数値

# ### ブール値
# 
# Pythonでは、bool型の値は```True```と```False```の2種類です。**条件式**や**論理演算**でよく使われます。
# 
# 組込み関数```bool()``` は、オブジェクトや演算式等を真理値判定に基づいて、任意のPythonデータ型を```bool```に変換できます。

# ```{note}
# **関数**の詳細については今後の授業で学びますので、さしあたり今は、関数に引数を渡すと、その値に応じた何らかの処理結果を返すということを知っておけば良いです。
# ```

# - $0$ではない数値は```True```と見されます。

# In[1]:


bool(10)


# - $0$は```False```と見されます。

# In[2]:


bool(0)


# ### 整数
# 整数は、小数点以下がなく数値です。

# In[3]:


123


# In[4]:


-123


# 大きな数値のセパレータとしてアンダースコア(```_```)を使えます。

# ```{margin}
# 整数の先頭に$0b$,$0o$,$0x$がつくのは、通常の10進数以外の基数であることを指します。
# ```

# In[5]:


1_000_000


# Pythonでは数値の計算もできます。数学演算子は表のように定義されています。
# 
# 演算の優先順位は通常の数学と同様に定義されています。通常の数学と同様に、()を使えば、演算の順番を決めることもできます。
# <table class="table2">
#     <thead>
#         <tr><th>演算子</th><th>演算</th><th>例</th></tr>
#     </thead>
#     <tbody>  
#         <tr><td>+</td><td>加算</td><td>a + b</td></tr>
#         <tr><td>-</td><td>減算</td><td>a - b</td></tr>
#         <tr><td>*</td><td>乗算</td><td>a * b</td></tr> 
#         <tr><td>/</td><td>除算</td><td>a / b</td></tr> 
#         <tr><td>%</td><td>剰余</td><td>a % b</td></tr>
#         <tr><td>//</td><td>切り捨て除算</td><td>a // b</td></tr>
#         <tr><td>**</td><td>べき乗</td><td>a ** b</td></tr>
#     </tbody>
# </table>
# 
# 少し馴染みのない演算子のは、
# - 演算子 ```//``` は小数部を切り捨てた整数値（商）を返します。
# - 演算子 ```%```は整数除算の余り（剰余）を返します。

# In[6]:


13//5


# In[7]:


13%5


# ### 浮動小数点数
# 
# Pythonでは、整数と小数点のある数（実数）は浮動小数点数といいます。
# 
# ここで注意する必要があるのは、整数と実数が数学的に同じ数を表す場合でも、コンピュータの中で異なる形式で記憶されますので、表示は異なります。 

# In[8]:


5.


# In[9]:


5.0


# 浮動小数点数は文字```e```の後ろに$10$進の桁数を入れて指定することもできます。

# In[10]:


5e2


# ここで注意する必要があるのは、整数と実数が数学的に同じ数を表す場合でも、コンピュータの中で異なる形式で記憶されますので、表示は異なります。 
# ```{margin}
# プログラムの中で扱う変数には様々な"型"(```type```)があります。変数の型は```type()```という関数を使うことで調べることができる。
# ```

# In[11]:


print(type(5.0))
print(type(5))


# 浮動小数点数も算術演算子を使えます。
# 
# また、整数と実数が混ざって計算も可能です。ただ、その場合、結果は実数になります。

# In[12]:


2+5.0


# ```int()```関数で、浮動小数点数を整数に変換できます。

# In[13]:


int(98.5)


# ```float()```関数で、整数を浮動小数点数に変換できます。

# In[14]:


float(98)


# ````{tab-set}
# ```{tab-item} 練習問題1
# 一日は何秒だを計算してみよう。
# ```
# 
# ```{tab-item} 練習問題2
# $1$年$365$日といいますが、厳密的に言えば、$1$年を$366$日とする閏年を$400$年間に$97$回設けることによって、$1$年の平均日数を$365.2425$日とする。
# 
# 今度は一年は何分何秒かを計算しよう。一年$=()$分$()$秒で回答してください。
# ```
# ````

# In[ ]:





# ### 文字列
# 
# 文字列は数値とは異なるデータ型の一つで、文字通り文字を扱います。
# 
# #### 作成
# 
# 文字列は、**シーケンス**型という広義の型に属しています。シーケンス型とは順番のある要素の集まりを指します。インデックスで要素を指定して取り出すことができます。インデックスは$R$などとは違い、$1$ではなく、$0$から始まります。例えば、
# - ```0:3```とすると、$0$から$2$までの要素を取り出します。
# - ```1:```とすると$1$以降のすべての要素を取り出します。

# 文字列は、 クォートで文字を囲んで作ります。

# In[15]:


text="Hello!"
print(text)


# In[16]:


text='Hello!'
print(text)


# In[17]:


'"ダブル" クォートを埋め込むことができます'


# In[18]:


"'シングル' クォートを埋め込むことができます"


# In[19]:


'''三つのシングルクォート'''


# In[20]:


text='Hello!'


# 特定の文字の前にバックスラッシュをつけると、その文字を特殊な意味として扱うことができます。もっともよく使われるのは改行を意味する```\n```です。
# 
# ```{margin}
# Pythonには、小数の特殊なタイプの文字列があり、それらは最初クォートの前に文字を付けて示す。例えば、先頭が```r```の*raw文字列*では、 文字内の```\n``` は改行を表すエスケープシーケンスをエスケープシーケンスとして解釈されないようにする。特に説明しない限り、ここで取り上げるのは普通のUnicode文字列です。
# ```

# In[21]:


print("Hello\nWorld")


# #### $+$による連結

# In[22]:


"Hello"+"World"


# #### $*$による繰り返し

# In[23]:


"Hello"*3


# #### $[]$による文字の抽出

# 文字列から文字を取り出したい時には、$[]$にインデックスを指定するとその位置の文字を取得できます。
# - 先頭の文字は$0$から数えます。
# - 一番最後の文字が$-1$でも指定できます。後ろから二番目は$-2$,後ろから三番目は$-3$のように表すことができます。

# In[24]:


name="Max Weber"


# In[25]:


name[0]


# In[26]:


name[-1]


# In[27]:


name[:3]


# In[28]:


name[-5:]


# #### ```len```による文字の抽出

# Pythonの取り組み関数で文字列に対する操作を行うことができます。
# ```{margin}
# 先取りの定義ですが、関数とは、決められた操作を実行する名前付きのコードです。それらの中で、インポートなしですぐに使える関数を「**組み込み関数**」と呼びます。
# ```
# 

# In[29]:


len(name)


# #### ```split```による文字の分割
# ```split```関数は、区切り文字に基づいて文字列を分割し、部分文字列のリストを作ることができます。
# ```{margin}
# 引数とは、関数やを呼び出す際に渡す値のことです。基本的には、関数はこの「渡された値に対して処理を行い、結果を返す」ということを行っています。
# ```

# In[30]:


name.split(" ")


# #### ```replace```による文字の置換
# 
# ```replace```関数は、文字列の一部を置換することができます。

# In[31]:


name.replace("Max","Karl").replace("Weber","Marx")


# ### 真偽値型
# Pythonの真偽値型は```True```と```False```で定義されます。
# - 条件判断では、その結果が```True```であるか```False```であるかを判定します。
# - 真偽値型の値同士は```and```もしくは```or```キーワードで結合し、その結果を計算することができます。

# In[32]:


True or False

