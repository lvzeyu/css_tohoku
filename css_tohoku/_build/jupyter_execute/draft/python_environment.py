#!/usr/bin/env python
# coding: utf-8

# # Python環境
# 
# ## 仮想環境
# 
# Python を使って開発や実験を行うときは、用途に応じて専用の実行環境を作成し、切り替えて使用するのが一般的です。こういった、一時的に作成する実行環境を、「仮想環境」 と言います。
# 
# - **依存関係の管理**: プロジェクトごとに仮想環境を分けることで、それぞれの環境で必要なパッケージのバージョンを独立して管理できます。これにより、異なるプロジェクト間での依存関係の衝突を避けることができます。
# - **システムの整理**: システム全体にライブラリをインストールするのではなく、必要なプロジェクトにのみインストールすることで、システムをクリーンに保ちます。
# - **移植性の向上**: 仮想環境を使用することで、その環境を容易に他のマシンにコピー・再現することが可能になります。
# - **バージョンアップのテスト**: 新しいライブラリのバージョンを試す場合、仮想環境を使えば、システム全体に影響を与えることなくテストが行えます。
# 
# ## Anaconda
# 
# 数あるPython の環境を構築する方法の中で、 [Anaconda](https://www.anaconda.com/)を利用することをお勧めします。
# Anaconda はデータサイエンス向けの環境を提供するプラットフォームです。科学技術計算などを中心とした、多くのモジュールやツールのコンパイル済みバイナリファイルを提供しており、簡単にPythonを利用する環境を構築・管理できます。Windows, Linux, macOS向けのパッケージが提供されています。
# 
# ### Anacondaのインストール
# 
# 下記の記事を参照してAnacondaをインストールします
# 
# 
# - [Windows版Anacondaのインストール](https://www.python.jp/install/anaconda/windows/install.html)
# - [MacOS版Anacondaのインストール](https://www.python.jp/install/anaconda/macos/install.html)
# - [Linux版Anacondaのインストール](https://www.python.jp/install/anaconda/unix/install.html)
# 
# ### Conda環境の作成
# - Conda環境は、```conda create```コマンドでPython環境を作成します。つぎのコマンドは、```chss``` という名前で、```Python 3.10```の環境を作成します。
# ```
# conda create --name chss python=3.10
# ```
# - 作成した環境を確認します。
# ```
# conda info -e
# ```
# - 作成した環境を有効にする。
# ```
# conda activate chss
# ```

# ![](./Figure/conda.png)

# - Python のバージョンを確認する
# 
# 
# ```
# python --version
# ```
# 
# ```
# python3 --version
# ```

# ## 最初の Python アプリケーションの作成
# 
# Python と Python ツールがインストールされたので、最初の Python アプリケーションを作成できます。
# 
# [公式のチュートリアル](https://learn.microsoft.com/ja-jp/training/modules/python-install-vscode/6-exercise-first-application?pivots=windows)を参照してください。

# ## Jupyter Notebook
# 
# Jupyter Notebookとは、ブラウザの強力な表示機能を活用したインターフェイスです。コードのインタラクティブな実行だけでなく、Markdownテキスト・数式・図などを含んだドキュメント作成の機能も備えています。
# 
# ### Jupyterの基本
# - Jupyterにはコマンドモードとエディットモードがあります。セルをダブルクリックするか、選択して```enter```を押すと、そのセルのエディットモードになります。エディットモードで```esc```を押すか、別のセルをクリックするとコマンドモードに戻ります。
# - jupyterはセルを基本的な要素としています。セルにはいくつか種類がありますが、CodeとMarkdownの２種類だけ覚えてください。
# - [ショートカット](https://qiita.com/zawawahoge/items/baa2a5318df079c5f7e5)はいろいろありますが、最低限次だけは覚えましょう。
# 
# ```
# shift+enterを押す: コードを実行し、下のセルに移動する.
# Mを押す: マークダウンセルにする
# Yを押す: コードセルにする
# Dを二回押す: セルを削除する
# Oを押す: セルの出力結果の表示・非表示
# Aを押す: 上にセルを追加する
# Bを押す: 下にセルを追加する  	
# ```
# 
# ### カーネル
# 
# Jupyter Notebookにおけるカーネル(Kernel)とは、プログラミング言語の機能を提供することを指します。本授業の場合は、基本的にはIpythonカーネルを指します。
# 
# Jupyter Notebook自身は、あくまでもWebアプリケーションとしてのインタフェースにすぎません。Ipythonカーネルを通じて、Jupyter NotebookのインタフェースとPythonに繋ぎます。
# 
# VsCodeでは利用可能なカーネルを検索してくれるので、右上の```Select Kernel```でPython環境を指定することができます。

# ### セルの記述と実行
# 
# ![](./Figure/jupyter_cell.png)

# In[1]:


print("hello,jupyter")


# ### Markdown
# 
# Markdown（マークダウン）は、文書を記述するための言語のひとつです。基本的なMarkdown記法を覚えておきましょう。
# 
# #### 見出し
# ```
# # 見出し1
# ## 見出し2
# ### 見出し3
# #### 見出し4
# ##### 見出し5
# ###### 見出し6
# ```
# 
# #### 箇条書きリスト
# ```
# - リスト1
#     - ネスト リスト1_1
#         - ネスト リスト1_1_1
#         - ネスト リスト1_1_2
#     - ネスト リスト1_2
# - リスト2
# - リスト3
# ```

# - リスト1
#     - ネスト リスト1_1
#         - ネスト リスト1_1_1
#         - ネスト リスト1_1_2
#     - ネスト リスト1_2
# - リスト2
# - リスト3

# #### 番号付きリスト
# ```
# 1. 番号付きリスト1
#     1. 番号付きリスト1_1
#     1. 番号付きリスト1_2
# 1. 番号付きリスト2
# 1. 番号付きリスト3
# ```

# 1. 番号付きリスト1
#     1. 番号付きリスト1_1
#     1. 番号付きリスト1_2
# 1. 番号付きリスト2
# 1. 番号付きリスト3

# #### 引用
# ```
# >社会学（しゃかいがく、仏: sociologie、英:Sociology）は、社会現象の実態や、現象の起こる原因に関するメカニズム（因果関係）を体験・統計・データなどを用いて分析することで解明する学問である。
# ```

# #### 数式
# 
# Latex書式で数式を記述することができます。
# 
# $\frac{n!}{k!(n-k)!} = \binom{n}{k}$
# 
