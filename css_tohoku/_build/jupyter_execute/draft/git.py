#!/usr/bin/env python
# coding: utf-8

# # Git
# 
# ## 紹介
# 
# [Git](https://git-scm.com/)は「**パージョン管理システム(Version Control System)**」と呼ばれるものの一つです。
# 
# パージョン管理システム(（Version Control System)とは、プログラムやドキュメントなどのファイルに対して、時間とともに加えられた変更を記録するシステムです。
# 
# 具体的に言えば、ファイルの「パージョン(変更履歴)」を記録して、いつでも過去の状況に戻したり、過去の変更履歴を比較したり、またはどのタイミングで問題が起こっていたかを確認したり、様々なことができるプログラム開発やファイル管理を補助するシステムです。
# 
# ```{margin}
# 様々な方法でGitを使うことができますが、この授業では、コマンドラインツールとVSCodeでGitを使います。コマンドラインツールを利用する際、Macの場合はターミナル、Windowsの場合はコマンド・プロンプトやPowerShellを使います。
# ```
# 
# パージョン管理システムはたくさんの種類がありますが、現在最も利用されているのはGitです。さらに、[**GitHub**](https://github.com/)などの**リモートリポジトリ**と組み合わせることで、クラウドでデータと進捗を管理したり、他のメンバーとコードと情報を共有したり、個人のプロジェクトだけでなく、共同開発するときも強力なツールとなります。
# 

# ## インストール
# 
# ### Gitインストール
# 
# [公式サイト](https://git-scm.com/downloads)からGitをインストールする。
# 
# ### VSCodeのインストール
# 
# - [公式サイト](https://code.visualstudio.com/)からVSCodeをインストールする。
# - 必要な拡張機能をインストールします。左側のサイドバーで「拡張機能」をクリックして、検索欄で以下の拡張機能を検索し、インストールしてください。
#     - Git History
#     - Git Graph
#     - GitLens
#     - GitHub Pull Requests and Issues
#     - Python
#     - Jupyter
# 
# ```{note}
# VSCodeは強力なコードエディターであり、様々なプログラミング言語に機能を提供する幅広い拡張機能を備えた軽量の汎用統合開発環境 (IDE) です。VSCodeでより簡単的に・効率的にGitを操作できます。また、VSCodeでは便利な機能が豊富に搭載されている[Python拡張機能](https://learn.microsoft.com/ja-jp/training/modules/python-install-vscode/5-exercise-install-python-extension?pivots=linux)もたくさんあります。
# ```

# ## Gitの基本操作

# 
# Git プロジェクトを取得するには、大きく二通りの方法があります。 
# - 既存のプロジェクトやディレクトリを Git にインポートする方法。
# - 既存の Git リポジトリを別のサーバーからクローンする方法です。
# 
# まず、既存のプロジェクトやディレクトリを Git にインポートし、ファイルをコミットと履歴の管理を説明します。
# 
# #### 既存のディレクトリでのリポジトリの初期化
# 
# ```{margin}
# 空のディレクトリではなくすでに存在するファイルのバージョン管理を始めたい場合は、まずそのファイルを監視対象に追加する。例えば、すでに存在する```myfile.txt```を以下のコマンドで追加します。```git add myfile.txt```
# ```
# ````{tab-set}
# 
# ```{tab-item} ターミナル操作
# 
# - ディレクトリを作ろう
# <pre>
# mkdir test
# cd test
# </pre>
# - **リポジトリの初期化** 
# <pre>
# git init
# </pre>
# ```
# 
# ```{tab-item} VSCode操作
# 
# - 「ファイル」→「フォルダーを開く』→　ディレクトリを選択。VSCode左側の『エクスプローラー』に、開いたフォルダ名が表示されます。
# -  サイドバーの「ソース管理」(Source Control)を表示して，「リポジトリの初期化」(Initialize Rspository)をクリックします。
# 
# ![](./Figure/git_init.png)
# 
# ```
# ````

# #### コミット(commit)
# 
# リポジトリを作成すると、そこに対する**ファイルの変更履歴を登録すること**ができます。その操作を<ins>**コミット(commit)**<ins>といいます。
# 
# コミットを実行すると、リポジトリの内では、前回コミットした時の状態から現在の状態までの差分を記録したリビジョン(Revision)と呼ばれるものが作成されます。
# 
# コミットによって、ディレクトリ中の全てのファイルのスナップショットを記録します。
# 
# ![](./Figure/commit1.png)
# 
# - Gitの管理下に置かれた、みなさんが実際に作業をしているディレクトリのことを**ワークツリー**と呼びます。
# - Gitでは、コミットを実行した時にワークツリーから直接リポジトリ内に状態を記録するのでなく、その間に設けられている**インデックス**の設定された状態を記録するようになっています。
#    - インデックスとは、リポジトリにコミットする準備をするための場所のことです。
#    - コミットでファイルの状態を記録するためには、<ins>まずインデックスにファイルを登録する必要があります。<ins>
#    - このようにインデックスを間に挟むことで、ワークツリー内の必要ないファイルを含めずにコミットを行ったり、ファイルの一部の変更だけをインデックスに登録してコミットすることができます。
# - まとめると、コミットのプロセスは以下になります:
#     1. ワークツリー（作業している場所）で編集、変更を行います
#     2. インデックス（一時登録場所）へ編集・変更内容を登録
#     3. リポジトリへ変更内容を登録（コミット）

# ````{tab-set}
# 
# ```{tab-item} ターミナル操作
# 
# - ディレクトリで任意のファイルを作る。例えば、
# <pre>
# echo This is some text > myfile.txt
# </pre>
# 
# 
# - ```git status```というコマンドでステータスを確認すると、```myfile.txt```は```Untracked file```であり、つまり、また追跡対象になっていないです。
# <pre>
# git status
# </pre>
# ![](./Figure/git_status_1.png)
# - ```git add myfile.txt```で```myfile.txt```を追跡対象に追加し、再び```git status```でステータスを確認すると、```Changes to be committed```、すなわち、コミット待ちと表示されています。
# <pre>
# git add myfile.txt
# git status
# </pre>
# ![](./Figure/git_status_2.png)
# - コミットをするには```git commit```というコマンドを使います。コミットをする際、コミットの内容を説明するメッセージを記入する必要があります。```-m``` というオプションを付加して、その後メッセージを入れましょう。例えば、
# <pre>
# git commit -m "myfileを作成ました"
# </pre>
# ![](./Figure/git_status_3.png)
# 
# ```
# 
# ```{tab-item} VSCode操作
# 
# - ファイルを作成すると、VSCodeが自動的に変更を検出し、ソース管理サイドバーで数字が表示されます。
# 
# ![](./Figure/commit_example4.png)
# - ソース管理に更新ファイルの一覧が表示されます。```+```アイコンでステージング操作を行います(```git add```と相当する)。
# - ステージングした状態からコミットメッセージを入力して、```コミット(Commit)```アイコンでコミットが完了します。
# 
# ![](./Figure/commit_example5.png)
# ```
# ````

# #### コミットリセット(reset)
# 
# どんな作業であっても、何かをやり直したくなることはあります。 ここでは、行った変更を取り消すための基本的なツールについて説明します。
# 
# 仮に、```myfile.txt```を削除し、コミットした操作を行いましたが、実はこのファイルは捨ててはいけないファイルだったと気ついたとします。
# 
# Gitで間違えた変更を元に戻していきましょう。
# 
# ````{tab-set}
# ```{tab-item} 実習問題
# - ```myfile.txt```を削除し、```delete myfile```というコメントでコミットします。
# ```
# ````

# ```{margin}
# 
# 
# ```HEAD```は現在使用しているブランチの先頭を表す、つまり、今自分が作業をしているブランチの最新のコミットを示すことです。
# 
# 
# ```
# ````{tab-set}
# 
# ```{tab-item} ターミナル操作
# 
# -  ```git log```でコミットの情報を確認します。コミットを特定するためには、```5d5277156bfef81535e8938f4e9f71b1db2eacf8```のような形のハッシュを使います。
# 
# <pre>
# git log
# </pre>
# 
# ![](./Figure/git_log.png)
# 
# - 特定のコミットまで戻す場合、以下のコマンドのような形でコミットIDを指定できます。
# 
# <pre>
# git reset 8983e71d981c204a92d417c0301b8e9c5f99b7f9
# </pre>
# 
# -「特定のコミットまで戻す」とは、コミットにおけるワークツーリ、インデックス、リポジトリのどちらに戻すでも可能です。コマンドにオプションを付加することでresetの方法を指定できます。デフォルトの場合は、コミットとステージングが元の状態に戻ります。
# 
# ```
# 
# ```{tab-item} VSCode操作
# 
# - [Git Graph](https://marketplace.visualstudio.com/items?itemName=mhutchie.git-graph)という拡張機能をインストールします。
# - サイドバーの「Source Control」→「View Commit Graph」をクリックすると、ログを確認できます。
# - 戻すそうのコミットを見つけて、マウスの右クリックし、表示されるメニュで「```Reset Current Branch to Commit```」→ 「```Reset```」を選ぶと、指定したコミットに戻ります。
# ```
# ````

# ```{note}
# リセットはオプションを指定できます。
# - ```--soft``` 「ワークツーリでの変更」→「ステージング」→「リポジトリへコミット」の作業のうち、最後の「コミット」だけをリセットする方法です。ファイルがステージングされた状態まで戻されます。
# - ```--mixed``` 「ワークツーリでの変更」→「ステージング」→「リポジトリへコミット」の作業のうち、「ステージング」までをリセットする方法です(default オプション)。インデックスが空の状態に戻すので、ここでステージングをやり直してコミットできます。
# - ```--hard```　「ワークツーリでの変更」→「ステージング」→「リポジトリへコミット」の作業のうち、「ワークツーリでの変更」までをリセットする方法です。この方法の場合、ファイルの変更などを含めて破棄されます。つまり、指定したミットまでまるごと消す操作になります。
# ```

# ````{tab-set}
# ```{tab-item} 実習問題
# - ```git reset```で一つ前のコミットに戻す、```git status```でコミット状態を確認してください。
# - ファイルの変更状態を確認できましtら、「ステージング」→「リポジトリへコミット」の操作でワークツーリにおけるファイルの変更を行います。
# ```
# ````

# `````{admonition} Advanced
# :class: important
# 
# ```git checkout```でも元の状態に戻すことができます。ただ、この操作はワークツリーまで変更するので、場合による```checkout```は作業ディレクトリを破壊する(上書きなど)可能性もありますので、十分に注意してください。一方、```git reset```は```--hard```オプションではないなら、作業ディレクトリにファイルに直接に変更は加えられていません。
# 
# `````

# #### ブランチ(branch)
# 
# ブランチとは、開発の本流から分岐し、それぞれ状態ごとに作業を進める機能のことです。
# 
# ブランチ機能を使うことで、複数の状態を同時に保つことができます。個人作業での試行錯誤もグールプの共同作業も非常に役を立っています。
# 
# ![](./Figure/branch.png)
# 
# 

# ````{tab-set}
# ```{tab-item} 実習問題
# - ```myfile2.txt```という新しいファイルを作成し、```add myfile2```というコメントでコミットします。
# - コミットの履歴を確認します。
# ```
# ````

# ````{tab-set}
# 
# ```{tab-item} ターミナル操作
# 
# - 新しいブランチを作ってみましょう。例えば、以下のコマンドで```develop```という名前のブランチを作成します。
# <pre>
# git branch develop
# </pre>
# 
# - 特定のコミットからブランチを作る際、```git checkout```コマンドを使います。例えば、コミットID```3be9fa7```から```renewal```という名前のブランチを作るなら、以下のコマンドを実行します。
# 
# <pre>
# git checkout 8983e71 -b renewal
# </pre>
# 
# - ```git branch```で現在作られるブランチの一覧を確認できます。
# - ```git checkout```で切り替えます。例えば、以下のコマンドで```develop```に切り替えます。
# 
# <pre>
# git checkout develop
# </pre>
# 
# ```
# 
# 
# ```{tab-item} VSCode操作
# 
# - 画面の左下のブランチ名（main/master）が表示されている個所をクリックし、新しいブランチを作成を実行します。手順で作成するブランチ名を入力してブランチを作成します。
# - Git Graphを開けて、分岐を作成したいコミットで右クリックし、表示される表示されるメニュで```Create Branch```を選ぶ、手順で作成するブランチ名を入力してブランチを作成します。
# ```
# ````

# ![](./Figure/git_branch1.svg)

# #### マージ(merge)
# 
# 
# ブランチを分けて作業を進めると、各ブランチでの内容がバラバラになります。そんな時に、各ブランチでの変更をまとめる機能は「マージ」です。
# 
# 仮に、```develop branch```で```myfile3.txt```を追加する作業を行います。
# 
# ```
# git checkout develop
# echo some text >> myfile3.txt
# git add myfile3.txt
# git commit -a -m "add myfile3.txt"
# ```

# ```{margin}
# 
# ```git diff [ブランチ名A] [ブランチ名B]```でブランチ間の差分を確認できます。
# 
# ```
# ![](./Figure/git_merge_1.svg)

# ````{tab-set}
# ```{tab-item} 実習問題
# - ```main/master```ブランチに切り替えます。
# - ```main/master```ブランチで```myfile4.txt```を作成し、 "add myfile4.txt" というメッセージでコミットします。
# ```
# ````

# ```develop```ブランチと```main/master```ブランチの間に差分を確認できます。
# ![](./Figure/git_merge_2.svg)
# ここで、```develop```ブランチを```main/master``ブランチにマージします。
# 
# ````{tab-set}
# 
# ```{tab-item} ターミナル操作
# 
# - ```git branch```で現在```main/master```ブランチにいることを確認します。
# - マージを実行します。
# 
# <pre>
# git merge develop -m "merge develop branch"
# </pre>
# 
# ```
# 
# ```{tab-item} VSCode操作
# -  ステータスバーの左下端に表示されているブランチが「```main/master```」になっていることを確認します。
# - ```Ctrl+Shift+P```（```Command+Shift+P```）でコマンドパレットを開く、入力欄に```Git:merge```と入力するとマージの項目が表示されます。
# - マージしたいブランチを選択します。これで、現在のブランチに選択したブランチがマージされます。
# 
# ```
# ````

# 再び```develop```ブランチと```main/master```ブランチの間に差分を確認すると、```develop```での変更は```main/master```ブランチに反映できたことがわかりました。
# ![](./Figure/git_merge_3.svg)

# ブランチの履歴も確認できます。
# <pre>
# git log --graph --decorate --oneline
# </pre>
# 
# ![](./Figure/git_merge_4.png)
# 

# ````{tab-set}
# ```{tab-item} 課題
# 以下の指示に従って操作を行ってくだい。
# - ```chss2023_practices```という名前のフォルダを作成し、その中でGitを初期化します。
# - ```README.md```というファイルを作成し、"README.mdを作成しました" というメッセージでコミットしてください。
# - "README.mdを作成しました" のコミットに基づく、```develop```というブランチを作成してくだい。
# - ```master/main```ブランチで```practice1.txt```というファイルを作成し、"practice1.txtを作成しました" というメッセージでコミットしてください。
# - ```develop```ブランチで```practice2.txt```というファイルを作成し、"practice2.txtを作成しました" というメッセージでコミットしてください。
# - ```master/main```ブランチに```develop```ブランチをマージします。メッセージは"merge develop branch" で入力してください。
# - 「ソース管理」→「Show Commit Graph」でコミット履歴を確認してくだい。表示されるCommit Graphをスクリーンショットして、課題として提出してください。
# ```
# ````

# 
